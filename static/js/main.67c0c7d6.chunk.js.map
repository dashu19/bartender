{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Bartender","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getDrinkLinks","asyncToGenerator","regenerator_default","a","mark","_callee","drinklist","url","sections","i","response","json","dirty","cleaned","j","wrap","_context","prev","next","fetch","sent","parse","wikitext","parseList","length","push","setState","drinklinks","initial","stop","slice","indexOf","replace","split","trim","getDrinkInfo","_ref2","_callee2","n","link","url1","fulllink","parsed","_context2","state","parseInfobox","name","served","garnish","drinkware","ingredients","prep","console","log","_x","apply","arguments","drink","match","infoboxflag","openbracketindex","barindex","closebracketindex","includes","openbracesindex","closebracesindex","opentagindex","closetagindex","dirtyingredients","getDrink","_callee3","_context3","Math","floor","random","clicked","generateButton","buttontext","react_default","createElement","className","onClick","generateServed","values","straight","rocks","blended","generateDrinkwareImage","ret","cocktail","poco","hurricane","winew","collins","highball","shot","margarita","flute","coffee","old","src","alt","generateDrinkwareText","generateIngredients","key","generateGarnish","generateContentText","generateContent","href","target","rel","componentDidMount","_callee4","_context4","componentDidUpdate","render","timing","React","Component","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67c0c7d6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\n//still need to figure out how to handle drinks that are variations, '#' in the linke\r\n//still need to figure out how to handle infoboxs that dont haveinformation\r\n\r\nclass Bartender extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      initial: true,\r\n      clicked: false,\r\n      drinklinks: [],\r\n      drink: null,\r\n      name: null,\r\n      served: null,\r\n      garnish: null,\r\n      drinkware: null,\r\n      ingredients: null,\r\n      prep: null,\r\n      timing: null,\r\n      fulllink: null,\r\n    };\r\n  }\r\n\r\n  //Get list of IBA drinks from IBA cocktail page on wikipedia\r\n  getDrinkLinks = async () => {\r\n    let drinklist = [];\r\n    const url = 'https://en.wikipedia.org/w/api.php?action=parse&pageid=8702622&origin=*&prop=wikitext&format=json&section=';\r\n    const sections = ['2', '3', '4'];\r\n    for (var i = 0; i < 3; i++){\r\n      let response = await fetch(url+sections[i]);\r\n      let json = await response.json();\r\n      let dirty = json.parse.wikitext['*'];\r\n      let cleaned = this.parseList(dirty);\r\n      for (let j = 0; j < cleaned.length;j++){\r\n          drinklist.push(cleaned[j]);\r\n      }\r\n    }\r\n    this.setState({drinklinks: drinklist});\r\n    this.setState({initial: false});\r\n  }\r\n\r\n  //Parses wikitext to get list of drinks, takes string json string from getDrinkLinks()\r\n  parseList = (wikitext) =>{\r\n    let cleaned = wikitext;\r\n    cleaned = cleaned.slice(cleaned.indexOf('*'));\r\n    cleaned = cleaned.slice(1,cleaned.indexOf('\\n{{'));\r\n    cleaned = cleaned.replace(/]/g,'');\r\n    cleaned = cleaned.replace(/[[]/g,'');\r\n    cleaned = cleaned.split('\\n*');\r\n    for (let i = 0; i<cleaned.length;i++){\r\n      cleaned[i] = cleaned[i].trim();\r\n      cleaned[i] = cleaned[i].split('|');\r\n    }\r\n    return cleaned;\r\n  }\r\n\r\n  //Takes an integer and fetches the matching drink link from this.state.drinklinks (by index) info from the wikipedia api\r\n  getDrinkInfo = async (n) => {\r\n    const url = 'https://en.wikipedia.org/w/api.php?action=parse&origin=*&prop=wikitext&redirects=true&format=json&page=';\r\n    const link = this.state.drinklinks[n];\r\n    const url1 = url + link[0];\r\n    const fulllink = 'https://en.wikipedia.org/wiki/' + link;\r\n    const response = await fetch(url1);\r\n    const json = await response.json();\r\n    let parsed = this.parseInfobox(json.parse.wikitext['*'],link[link.length - 1]);\r\n    this.setState({name:parsed.name});\r\n    this.setState({served:parsed.served});\r\n    this.setState({garnish:parsed.garnish});\r\n    this.setState({drinkware:parsed.drinkware});\r\n    this.setState({ingredients:parsed.ingredients});\r\n    this.setState({prep:parsed.prep});\r\n    this.setState({fulllink: fulllink});\r\n    //console.log(n, parsed.name, parsed.drinkware, 'end of getDrinkInfo');\r\n    console.log(n, parsed.drinkware);\r\n  }\r\n\r\n  //Takes text from fetched JSON from getDrinkInfo() and parses it, and stores data into an object\r\n  parseInfobox = (wikitext, name) => {\r\n    let drink = {}\r\n    let cleaned = wikitext;\r\n\r\n    //DONE: Get correct infobox\r\n    let count = (cleaned.match(/nfobox/g) || []).length;\r\n    if (count>1){\r\n      let infoboxflag = true;\r\n      let endinfobox = -50;\r\n      let nameindex = -50;\r\n      while(infoboxflag){\r\n        cleaned = cleaned.slice(cleaned.indexOf('nfobox')+6);\r\n        endinfobox = cleaned.indexOf('\\n}}\\n');\r\n        nameindex = cleaned.indexOf(name);\r\n        if (endinfobox > nameindex){\r\n          infoboxflag = false;\r\n        }\r\n      }\r\n    } else{\r\n      cleaned = cleaned.slice(cleaned.indexOf('nfobox')+6);\r\n    }\r\n    cleaned = cleaned.slice(0, cleaned.indexOf(\"\\n}}\\n\"));\r\n\r\n    //TODO?: Universal cleans\r\n    cleaned = cleaned.replace(/\\* /g, '*');\r\n\r\n    //DONE: Split infobox wikitext by line and remove '|' character\r\n    cleaned = cleaned.split('\\n|');\r\n\r\n    for (let i = 0; i < cleaned.length; i++){\r\n      cleaned[i] = cleaned[i].trim();\r\n\r\n      //DONE: Remove internal wikilinks from wikitext markup\r\n      let openbracketindex = -50;\r\n      let barindex = -50;\r\n      let closebracketindex = -50;\r\n      while (cleaned[i].includes('[[')){\r\n        openbracketindex = cleaned[i].indexOf('[[');\r\n        barindex = cleaned[i].indexOf('|');\r\n        closebracketindex = cleaned[i].indexOf(']]');\r\n        if (openbracketindex < barindex && barindex < closebracketindex){\r\n          cleaned[i] = cleaned[i].slice(0,openbracketindex+2) + cleaned[i].slice(barindex+1);\r\n        }\r\n        cleaned[i] = cleaned[i].replace('[[','');\r\n        cleaned[i] = cleaned[i].replace(']]','');\r\n      }\r\n\r\n      //DONE: Remove braces references from wikitext markup\r\n      let openbracesindex = -50;\r\n      let closebracesindex = -50;\r\n      while (cleaned[i].includes('{{')){\r\n        openbracesindex = cleaned[i].indexOf('{{');\r\n        closebracesindex = cleaned[i].indexOf('}}');\r\n        cleaned[i] = cleaned[i].slice(0,openbracesindex) + cleaned[i].slice(closebracesindex+2);\r\n      }\r\n\r\n      //DONE: Remove html like tags from wikitext markup\r\n      let opentagindex = -50;\r\n      let closetagindex = -50;\r\n      while (cleaned[i].includes('<')){\r\n        opentagindex = cleaned[i].indexOf('<');\r\n        closetagindex = cleaned[i].indexOf('>');\r\n        cleaned[i] = cleaned[i].slice(0,opentagindex) + cleaned[i].slice(closetagindex+1);\r\n      }\r\n\r\n      //DONE: Split and clean each line entry into key value pairs\r\n      cleaned[i] = cleaned[i].split('=');\r\n      for (let j = 0; j < cleaned[i].length; j++){\r\n        cleaned[i][j] = cleaned[i][j].trim();\r\n      }\r\n\r\n      //DONE: Add key value pairs to drink object\r\n      if (cleaned[i][0] === \"name\"){\r\n        drink.name = cleaned[i][1];\r\n      } else if (cleaned[i][0] === \"served\"){\r\n        drink.served = cleaned[i][1];\r\n      } else if (cleaned[i][0] === \"garnish\"){\r\n        drink.garnish = cleaned[i][1];\r\n      } else if (cleaned[i][0] === \"drinkware\"){\r\n        drink.drinkware = cleaned[i][1];\r\n      } else if (cleaned[i][0] === \"ingredients\"){\r\n        let dirtyingredients = cleaned[i][1].replace(/[*]/g,'');\r\n        drink.ingredients = dirtyingredients.split('\\n');\r\n      } else if (cleaned[i][0] === \"prep\"){\r\n        drink.prep = cleaned[i][1];\r\n      }\r\n    }\r\n    // console.log('end of parseInfobox');\r\n    return drink;\r\n  }\r\n\r\n  //Handles click\r\n  getDrink = async () => {\r\n    // for (let i = 0; i <this.state.drinklinks.length;i++){\r\n    //   await this.getDrinkInfo(i);\r\n    // }\r\n    await this.getDrinkInfo(Math.floor(Math.random() * this.state.drinklinks.length));\r\n    await this.setState({clicked: true});\r\n    console.log('end of getDrink');\r\n  }\r\n\r\n  //Generates button\r\n  generateButton = () => {\r\n    let buttontext = (this.state.clicked) ? 'Another':'Surprise';\r\n    return(\r\n      <div className='Bartender-header'>\r\n        <button className='Bartender-button' onClick={() => this.getDrink()}>{buttontext}</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Generate served actual text\r\n  generateServed = () => {\r\n    let served = this.state.served;\r\n    const values = {\"straight\": \"Straight, without ice\",\r\n                    \"rocks\": \"On the rocks\",\r\n                    \"blended\": \"Blended with ice\"\r\n                  };\r\n    if (served in values){\r\n      served = values[served];\r\n    }\r\n    return served;\r\n  }\r\n\r\n  //Get drinkware image\r\n  generateDrinkwareImage = () => {\r\n    let drinkware = this.state.drinkware;\r\n    const values = {\"cocktail\":\"\",\r\n                    \"poco\":\"\",\r\n                    \"hurricane\":\"\",\r\n                    \"winew\":\"\",\r\n                    \"collins\":\"\",\r\n                    \"highball\":\"\",\r\n                    \"shot\":\"\",\r\n                    \"margarita\":\"\",\r\n                    \"flute\":\"\",\r\n                    \"coffee\":\"\",\r\n                    \"old\":\"\",\r\n                  };\r\n    let ret = \"\";\r\n    if (drinkware in values){\r\n      ret = drinkware + \".png\";\r\n    }\r\n    return (\r\n        <img className=\"Bartender-image\" src={ret} alt=\"dummyalt\"/>\r\n    );\r\n  }\r\n\r\n  //Generate drinkware text\r\n  generateDrinkwareText = () => {\r\n    const values = {\"cocktail\":\"Cocktail glass\",\r\n                    \"poco\":\"Poco grande glass\",\r\n                    \"hurricane\":\" Hurricane glass\",\r\n                    \"winew\":\"Wine glass\",\r\n                    \"collins\":\"Collins glass\",\r\n                    \"highball\":\"Highball glass\",\r\n                    \"shot\":\"Shot glass\",\r\n                    \"margarita\":\"Margarita glass\",\r\n                    \"flute\":\"Champagne flute\",\r\n                    \"coffee\":\"Irish coffee mug\",\r\n                    \"old\":\"Old fashioned glass\",\r\n                  };\r\n    let drinkware = this.state.drinkware;\r\n    if (drinkware in values){\r\n      drinkware = values[drinkware];\r\n    }\r\n    return drinkware;\r\n  }\r\n\r\n  //Generate ingredients\r\n  generateIngredients = () => {\r\n    let ret = [];\r\n    for (let i = 0; i < this.state.ingredients.length; i++){\r\n      ret.push(<li key={this.state.ingredients[i]}>{this.state.ingredients[i]}</li>);\r\n    }\r\n    return(\r\n      <ul className=\"Bartender-ingredientslist\">\r\n        {ret}\r\n      </ul>\r\n    );\r\n  }\r\n\r\n  //Generate garnish\r\n  generateGarnish = () => {\r\n    // console.log(this.state.garnish);\r\n    if (this.state.garnish === \"\") {\r\n      return <span />;\r\n    } else {\r\n      return (\r\n        <span>\r\n          <span className=\"Bartender-sectionheader\">Garnish: </span>\r\n          <span className=\"Bartender-sectiontext\">{this.state.garnish}</span>\r\n          <br /><br />\r\n        </span>\r\n      );\r\n    }\r\n  }\r\n\r\n  //Generate content text\r\n  generateContentText = () => {\r\n\r\n    return (\r\n      <div className=\"Bartender-contenttext\">\r\n        {this.generateDrinkwareImage()}\r\n        <span className=\"Bartender-sectionheader\">Drinkware: </span><span className=\"Bartender-sectiontext\">{this.generateDrinkwareText()}</span><br /><br />\r\n        <span className=\"Bartender-sectionheader\">Served: </span><span className=\"Bartender-sectiontext\">{this.generateServed()}</span><br /><br />\r\n        <span className=\"Bartender-sectionheader\">Ingredients:</span>\r\n        {this.generateIngredients()}\r\n        {this.generateGarnish()}\r\n        <span className=\"Bartender-sectionheader\">Preparation:</span><br /><span className=\"Bartender-preptext\">{this.state.prep}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Generates content\r\n  generateContent = () => {\r\n    // <img src=\"whiskey.svg\"/>\r\n\r\n    if (this.state.clicked === false){\r\n      return (<div></div>);\r\n    }\r\n\r\n    return(\r\n      <div className= \"Bartender-content\">\r\n        <div className= \"Bartender-title\"><a href={this.state.fulllink} target=\"_blank\" rel=\"noopener noreferrer\">{this.state.name}</a></div>\r\n        {this.generateContentText()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.getDrinkLinks();\r\n    console.log('endofdidmount');\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    // console.log(this.state.drink);\r\n  }\r\n\r\n  render = () => {\r\n    return(\r\n      <div>\r\n        {this.generateButton()}\r\n        {this.generateContent()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bartender;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}